install.packages('IRkernel')
IRkernel::installspec()
install.packages("AstralPlane")
install.packages(devtools)
install.packages("devtools")
devtools::install_github("chutter/AstralPlane")
AstralPlane::setupAstral()
getwd()
#Package install if needed
if (!require("vcfR")) {
install.packages("vcfR")
library(vcfR)
}
## reproducibility
set.seed(123)
#### Custom methods
convert_genotype <- function(genotype) {
alleles <- strsplit(genotype,  "\\|")
alleles <- lapply(alleles, as.numeric)
return(unlist(lapply(alleles,sum)))
}
### MAIN##
# Import files
files <- list.files(path = "./data", pattern = "\\.vcf", full.names = T)
# import and read all the data
data_list <- list()
for (file in files){
data <- read.vcfR(file)
data_list[[file]] <- data
}
setwd("C:/Users/User/Desktop/Master project/R_analysis")
### MAIN##
# Import files
files <- list.files(path = "./data", pattern = "\\.vcf", full.names = T)
for (file in files){
data <- read.vcfR(file)
data_list[[file]] <- data
}
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- data_list[[files[1]]]
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- data_list[[files[1]]]
sampled_loci <- sample(rownames(vcf_pop1), 1000, replace = FALSE)
# Sample the same loci for each VCF
vcf_list <- list()
for(file in files) {
data <- data_list[[file]]
sampled_data <- data[sampled_loci,]
vcf_list <- sampled_data
}
sampled_loci <- sample(rownames(vcf_pop1), 1000, replace = FALSE)
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- data_list[[files[1]]]
rownames(vcf_pop1)
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- data_list[[files[1]]]
vcf_pop1
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- data_list[[data_list[1]]]
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- data_list[[1]]
vcf_pop1
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- extract.gt(data_list[[1]])
vcf_pop1
View(vcf_pop1)
sampled_loci <- sample(rownames(vcf_pop1), 1000, replace = FALSE)
rownames(vcf_pop1)
sampled_loci
# Sample the same loci for each VCF
vcf_list <- list()
for(file in files) {
data <- data_list[[file]]
sampled_data <- data[sampled_loci,]
vcf_list <- sampled_data
}
# Sample the same loci for each VCF
vcf_list <- list()
for(file in files) {
data <- data_list[[file]]
#sampled_data <- data[sampled_loci,]
vcf_list <- sampled_data
}
for(file in files) {
data <- data_list[[file]]
#sampled_data <- data[sampled_loci,]
#vcf_list <- sampled_data
}
for(file in files) {
data <- data_list[[file]]
sampled_data <- data[sampled_loci,]
#vcf_list <- sampled_data
}
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
sampled_data <- data[sampled_loci,]
#vcf_list <- sampled_data
}
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
head(data)
#sampled_data <- data[sampled_loci,]
#vcf_list <- sampled_data
}
# Sample the same loci for each VCF
vcf_list <- list()
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
vcf_pop <- extract.gt(data)
sampled_data <- vcf_pop[sampled_loci, ]
vcf_list[[i]] <- sampled_data
#sampled_data <- data[sampled_loci,]
#vcf_list <- sampled_data
}
sampled_loci
sampled_data <- vcf_pop[sampled_loci, ]
sampled_data <- vcf_pop[seq(1:1000), ]
vcf_list[[i]] <- sampled_data
vcf_list
View(vcf_pop1)
View(vcf_pop1)
View(vcf_pop1)
vcf_list
View(vcf_list)
View(vcf_list)
vcf_list
vcf_list[[1]]
### MAIN##
# Import files
files <- list.files(path = "./data", pattern = "\\.vcf", full.names = T)
# import and read all the data
data_list <- list()
for (file in files){
data <- read.vcfR(file)
data_list[[file]] <- data
}
### Extract data for all the population
# Sample 1000 loci for the first vcf file
vcf_pop1 <- extract.gt(data_list[[1]])
#extract 1000 loci
sampled_loci <- sample(rownames(vcf_pop1), 1000, replace = FALSE)
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
vcf_pop <- extract.gt(data)
## get the same loci for all the population
sampled_data <- vcf_pop[seq(1:1000), ]
vcf_list[[i]] <- sampled_data
}
sampled_data <- vcf_pop[seq(1:1000), ]
vcf_list[[i]] <- sampled_data
vcf_list
sampled_data <- vcf_pop[sampled_loci, ]
sampled_data <- vcf_pop[as.vector(sampled_loci), ]
#extract 1000 loci
sampled_loci <- sample(seq(1, nrow(vcf_pop1)), 1000, replace = FALSE)
# Sample the same loci for each VCF
vcf_list <- list()
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
vcf_pop <- extract.gt(data)
## get the same loci for all the population
sampled_data <- vcf_pop[, ]
vcf_list[[i]] <- sampled_data
}
vcf_list
nrow(vcf_list[1])
nrow(vcf_list[[1]])
sampled_data <- vcf_pop[sampled_loci, ]
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
vcf_pop <- extract.gt(data)
## get the same loci for all the population
sampled_data <- vcf_pop[sampled_loci, ]
vcf_list[[i]] <- sampled_data
}
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
vcf_pop <- extract.gt(data)
## get the same loci for all the population
print(i)
sampled_data <- vcf_pop[sampled_loci, ]
vcf_list[[i]] <- sampled_data
}
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
vcf_pop <- extract.gt(data)
print(nrow(vcf_pop))
## get the same loci for all the population
print(i)
#sampled_data <- vcf_pop[sampled_loci, ]
#vcf_list[[i]] <- sampled_data
}
# Ensure the sampled loci are valid for all VCF files
common_loci <- Reduce(intersect, lapply(data_list, function(vcf) rownames(extract.gt(vcf))))
#extract 1000 loci
sampled_loci <- sample(common_loci), 1000, replace = FALSE)
#extract 1000 loci
sampled_loci <- sample(common_loci, 1000, replace = FALSE)
# Sample the same loci for each VCF
vcf_list <- list()
for(i in seq(1, length(data_list), by=1)) {
data <- data_list[[i]]
vcf_pop <- extract.gt(data)
## get the same loci for all the population
sampled_data <- vcf_pop[common_loci, ]
vcf_list[[i]] <- sampled_data
}
for(i in vcf_list){
print(i)
}
for(i in vcf_list){
genotype_numeric[[i]] <- as.data.frame(lapply(i[, -1], convert_genotype))
}
# Row are the loci and column are the individuals
# For the next step my thinking is: alleles at same loci have the same effect size so the cumulative effect should stay the same
# exemple individual 1 has two allele 1 with effect size 1.5. : (1 + 1) * 1.5 = 1 * 1.5 + 1 * 1.5 = 3
#Convert genotype into numeric sum them by individuals
genotype_numeric <- list()
for(i in vcf_list){
genotype_numeric[[i]] <- as.data.frame(lapply(i[, -1], convert_genotype))
}
print(i)
for(i in seq(1, length(vcf_list))){
genotype_numeric[[i]] <- as.data.frame(lapply(vcf_list[[1]][, -1], convert_genotype))
}
genotype_numeric[1]
genotype_numeric[[1]]
View(genotype_numeric)
vcf_list
vcf_list[1]
for(i in seq(1, length(vcf_list))){
genotype_numeric[[i]] <- as.data.frame(lapply(vcf_list[1][, -1], convert_genotype))
}
vcf_list[[1]]
for(i in seq(1, length(vcf_list))){
genotype_numeric[[i]] <- as.data.frame(lapply(vcf_list[[i]][, -1], convert_genotype))
}
genotype_numeric
# Row are the loci and column are the individuals
# For the next step my thinking is: alleles at same loci have the same effect size so the cumulative effect should stay the same
# exemple individual 1 has two allele 1 with effect size 1.5. : (1 + 1) * 1.5 = 1 * 1.5 + 1 * 1.5 = 3
#Convert genotype into numeric sum them by individuals
genotype_numeric <- list()
for(i in seq(1, length(vcf_list)-6)){
genotype_numeric[[i]] <- as.data.frame(lapply(vcf_list[[i]][, -1], convert_genotype))
}
View(genotype_numeric)
#### Custom methods
convert_genotype <- function(genotype) {
alleles <- strsplit(genotype,  "\\|")
alleles <- lapply(alleles, as.numeric)
return(unlist(lapply(alleles,sum)))
}
## test function
data <- data.frame(
locus = c("1_1_1", "1_1_2", "1_1_3"),
ind1 = c("0|0", "0|1", "1|0"),
ind2 = c("0|0", "1|1", "0|1"),
ind3 = c("0|1", "0|0", "1|1"),
stringsAsFactors = FALSE
)
# Test function
data_numeric <- as.data.frame(lapply(data[,-1], convert_genotype))
data_numeric
for(i in seq(1, length(vcf_list)-6)){
data <- as.data.frame(vcf_list[[i]])
data
#genotype_numeric[[i]] <- as.data.frame(lapply(vcf_list[[i]][, -1], convert_genotype))
}
for(i in seq(1, length(vcf_list)-6)){
data <- as.data.frame(vcf_list[[i]])
data
#genotype_numeric[[i]] <- as.data.frame(lapply(vcf_list[[i]][, -1], convert_genotype))
}
View(data)
for(i in seq(1, length(vcf_list)-6)){
data <- as.data.frame(vcf_list[[i]])
data
genotype_numeric[[i]] <- as.data.frame(lapply(data[, -1], convert_genotype))
}
genotype_numeric
for(i in seq(1, length(vcf_list))){
data <- as.data.frame(vcf_list[[i]])
genotype_numeric[[i]] <- as.data.frame(lapply(data[, -1], convert_genotype))
}
genotype_numeric
# Normal distribution of effect size based on all the loci
effects <- rnorm(nrow(genotype_numeric), mean = 0, sd = 1)
# Normal distribution of effect size based on all the loci
effects <- rnorm(nrow(genotype_numeric[1]), mean = 0, sd = 1)
# Normal distribution of effect size based on all the loci
effects <- rnorm(nrow(genotype_numeric[[1]]), mean = 0, sd = 1)
#Calculate phenotype
phenotype_list <- list()
for (i in seq(1:length(genotype_numeric))){
phenotype_list[[i]] <- rowSums(genotype_numeric[[i]] * effects)
}
phenotype
phenotype_list[[1]]
phenotype_list
## Calculate the mean phenotype for each population
mean_phenotypes <- sapply(phenotype_list, mean)
mean_phenotypes
#Calculate the variance within a population
var_within <- mean(sapply(phenotype,var))
#Calculate the variance within a population
var_within <- mean(sapply(phenotype_list,var))
#Calculate the variance between populations
var_between <- var(mean_phenotypes)
Q_st <- var_between / (var_between + 2*var_within)
qst
Q_st

install.packages('IRkernel')
IRkernel::installspec()
install.packages("AstralPlane")
install.packages(devtools)
install.packages("devtools")
devtools::install_github("chutter/AstralPlane")
AstralPlane::setupAstral()
getwd()
#Package install if needed
if (!require("vcfR")) {
install.packages("vcfR")
library(vcfR)
}
setwd("C:/Users/User/Desktop/Master project/R_analysis")
#### Custom methods
convert_genotype <- function(genotype) {
alleles <- strsplit(genotype,  "\\|")
alleles <- lapply(alleles, as.numeric)
return(unlist(lapply(alleles,sum)))
}
### MAIN##
# Import files
files <- list.files(path = "./data", pattern = "\\.vcf", full.names = T)
# import and read all the data
data_list <- list()
for (file in files){
data <- vcfR2tidy(read.vcfR(file))
data_list[[file]] <- data
}
View(data_list)
View(data_list[["./data/pop1.vcf"]][["gt"]])
data_list[["./data/pop1.vcf"]][["gt"]][["gt_GT"]]
# Common loci list
# Extract loci from each VCF file
loci_list <- lapply(data_list, function(vcf) rownames(extract.gt(vcf)))
# Common loci list
# Extract loci from each VCF file
# Extract loci from each long-table format data
loci_list <- lapply(data_list, function(data) unique(data$locus))
View(loci_list)
# Common loci list
# Extract loci from each long-table format data
loci_list <- lapply(data_list, function(data) unique(data$gt["POS"]))
View(loci_list)
common_loci <- Reduce(intersect, loci_list)
common_loci
View(loci_list)
common_loci <- Reduce(intersect, loci_list)
common_loci
# Common loci list
# Extract loci from each long-table format data
loci_list <- lapply(data_list, function(data) unique(data$gt["POS"]))
common_loci <- Reduce(intersect, loci_list[1:])
common_loci <- Reduce(intersect, loci_list[[]])
common_loci <- Reduce(intersect, loci_list[[1]])
common_loci
common_loci <- Reduce(intersect, loci_list[[1:]])
flat_loci_list <- unlist(loci_list, recursive = FALSE)
View(flat_loci_list)
common_loci <- Reduce(intersect, flat_loci_list)
common_loci
data_list[[1]]
data_list[[1]]$gt
data_list[[1]]$gt$gt_GT[common_loci,]
data_list[[1]]$gt$gt_GT
d <- data_list[[1]]$gt$gt_GT
d <- data_list[[1]]$gt
d[common_loci,]
d
common_loci
d[common_loci,]
print(n = 1000, d[common_loci,])
print(n = 1394, d[common_loci,])
## Extract genomic data
vcf_list <- list()
for (i in seq(1, length(data))){
data <- data_list[[i]]$gt
## get the same loci for all the population
sampled_data <- data[common_loci, ]
vcf_list[[i]] <- sampled_data
}
common_loci
d_sorted <- d[order(d$POS)][]
print(n = 1394, order(d[common_loci,][d_filtered$POS == 74, ]))
print(n = 1394, order(d[common_loci,][d$POS == 74, ]))
d <- data_list[[1]]$gt
print(n = 1394, order(d[common_loci,]))
print(n = 1394, order(d[common_loci,]))
print(n = 1394, d[common_loci,])
d_filtered <- d[common_loci,]
print(d_filtered[d_filtered$POS == 74,])
common_loci
common_loci <- Reduce(intersect, flat_loci_list)
common_loci
flat_loci_list <- unlist(loci_list, recursive = FALSE)
View(flat_loci_list)
common_loci <- Reduce(intersect, loci_list)
common_loci
flat_loci_list[["./data/pop1.vcf.POS"]]
common_loci
flat_loci_list <- unlist(loci_list, recursive = FALSE)
common_loci <- Reduce(intersect, flat_loci_list)
common_loci
d <- data_list[[1]]$gt
d
d[common_loci,]
d_filtered <- d[d$POS %in% common_loci,]
d_filtered
d
list_data_filtered <- list
for (i in seq(1, length(data))){
data <- data_list[[i]]$gt
d_filtered <- data[data$POS %in% common_loci,]
ist_data_filtered[[i]] <- d_filtered
}
list_data_filtered()
for (i in seq(1, length(data))){
data <- data_list[[i]]$gt
d_filtered <- data[data$POS %in% common_loci,]
list_data_filtered[[i]] <- d_filtered
}
list_data_filtered()
for (i in seq(1, length(data_list))){
data <- data_list[[i]]$gt
d_filtered <- data[data$POS %in% common_loci,]
list_data_filtered[[i]] <- d_filtered
}
list_data_filtered[[i] <- d_filtered
# Get all the genomic data with common loci for all the 8 population
list_data_filtered <- list
# Get all the genomic data with common loci for all the 8 population
list_data_filtered <- list()
for (i in seq(1, length(data_list))){
data <- data_list[[i]]$gt
d_filtered <- data[data$POS %in% common_loci,]
list_data_filtered[i] <- d_filtered
}
list_data_filtered()
# Get all the genomic data with common loci for all the 8 population
list_data_filtered <- list()
for (i in seq(1, length(data_list))){
data <- data_list[[i]]$gt
d_filtered <- data[data$POS %in% common_loci,]
list_data_filtered[[i]] <- d_filtered
}
list_data_filtered()
list_data_filtered
## Convert genetic data into numeric
genotype_numeric <- lapply(data_list, function(data) {
data$gt$gt_numeric <- sapply(data$gt, convert_genotype)
return(data)
})
#### Custom methods
convert_genotype <- function(genotype) {
alleles <- strsplit(genotype$gt_GT,  "\\|")
alleles <- lapply(alleles, as.numeric)
return(unlist(lapply(alleles,sum)))
}
## Convert genetic data into numeric
genotype_numeric <- lapply(data_list, function(data) {
data$gt$gt_numeric <- sapply(data$gt, convert_genotype)
return(data)
})
list_data_filtered
data$gt$gt_numeric <- sapply(data$gt$gt_GT, convert_genotype)
## Convert genetic data into numeric
genotype_numeric <- lapply(data_list, function(data) {
data$gt$gt_numeric <- sapply(data$gt$gt_GT, convert_genotype)
return(data)
})
#### Custom methods
convert_genotype <- function(genotype) {
alleles <- strsplit(genotype, "\\|")
alleles <- lapply(alleles, as.numeric)
return(sum(unlist(alleles)))
}
## Convert genetic data into numeric
genotype_numeric <- lapply(data_list, function(data) {
data$gt$gt_numeric <- sapply(data$gt$gt_GT, convert_genotype)
return(data)
})
#Package install if needed
if (!require("vcfR")) {
install.packages("vcfR")
library(vcfR)
}
setwd("C:/Users/User/Desktop/Master project/R_analysis")
#### Custom methods
convert_genotype <- function(genotype) {
alleles <- strsplit(genotype, "\\|")
alleles <- lapply(alleles, as.numeric)
return(sum(unlist(alleles)))
}
## test function
data <- data.frame(
locus = c("1_1_1", "1_1_2", "1_1_3"),
ind1 = c("0|0", "0|1", "1|0"),
ind2 = c("0|0", "1|1", "0|1"),
ind3 = c("0|1", "0|0", "1|1"),
stringsAsFactors = FALSE
)
### MAIN##
# Import files
files <- list.files(path = "./data", pattern = "\\.vcf", full.names = T)
# import and read all the data (convert it to long-table for faster calculation)
data_list <- list()
for (file in files){
data <- vcfR2tidy(read.vcfR(file))
data_list[[file]] <- data
}
# Common loci list
# Extract loci from each long-table format data
loci_list <- lapply(data_list, function(data) unique(data$gt["POS"]))
flat_loci_list <- unlist(loci_list, recursive = FALSE)
common_loci <- Reduce(intersect, flat_loci_list)
# Get all the genomic data with common loci for all the 8 population
list_data_filtered <- list()
for (i in seq(1, length(data_list))){
data <- data_list[[i]]$gt
d_filtered <- data[data$POS %in% common_loci,]
list_data_filtered[[i]] <- d_filtered
}
list_data_filtered
## Convert genetic data into numeric
genotype_numeric <- lapply(data_list, function(data) {
data$gt$gt_numeric <- sapply(data$gt$gt_GT, convert_genotype)
return(data)
})
head(genotype_numeric[[1]]$gt)
